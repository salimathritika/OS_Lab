//working ig
#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 10
#define TIME_QUANTUM 2

typedef struct {
    int pid;
    int burst_time;
    int arrival_time;
    int priority;
    int remaining_time;
    int turnaround_time;
    int waiting_time;
    int completion_time;
} Process;

void preemptiveSJF(Process processes[], int n);
void roundRobin(Process processes[], int n);
void nonPreemptivePriority(Process processes[], int n);

int main() {
    int choice, n, i;
    Process processes[MAX_PROCESSES];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    if (n <= 0 || n > MAX_PROCESSES) {
        printf("Invalid number of processes.\n");
        return 1;
    }

    printf("Enter burst time, arrival time, and priority for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d %d %d", &processes[i].burst_time, &processes[i].arrival_time, &processes[i].priority);
        processes[i].pid = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
    }

    do {
        printf("\nSelect scheduling algorithm:\n");
        printf("1. Preemptive SJF\n");
        printf("2. Round Robin\n");
        printf("3. Non-Preemptive Priority\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                preemptiveSJF(processes, n);
                break;
            case 2:
                roundRobin(processes, n);
                break;
            case 3:
                nonPreemptivePriority(processes, n);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 4);

    return 0;
}

void preemptiveSJF(Process processes[], int n) {
    // Sort processes by arrival time
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival_time > processes[j + 1].arrival_time) {
                Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    int currentTime = 0;
    int completed = 0;
    while (completed < n) {
        int shortestJob = -1;
        int shortestTime = 10000000;
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= currentTime && processes[i].remaining_time < shortestTime && processes[i].remaining_time > 0) {
                shortestJob = i;
                shortestTime = processes[i].remaining_time;
            }
        }

        if (shortestJob == -1) {
            printf("No process available at time %d.\n", currentTime);
            currentTime++;
        } else {
            processes[shortestJob].remaining_time--;
            currentTime++;

            if (processes[shortestJob].remaining_time == 0) {
                completed++;
                int turnaround = currentTime - processes[shortestJob].arrival_time;
                processes[shortestJob].turnaround_time = turnaround;
                processes[shortestJob].waiting_time = turnaround - processes[shortestJob].burst_time;
                processes[shortestJob].completion_time = currentTime;
            }
        }
    }

    printf("\nPID\tBurst Time\tArrival Time\tPriority\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burst_time, processes[i].arrival_time, processes[i].priority, processes[i].completion_time, processes[i].turnaround_time, processes[i].waiting_time);
    }
}

void roundRobin(Process processes[], int n) {
    int remainingTime[n];
    for (int i = 0; i < n; i++)
        remainingTime[i] = processes[i].burst_time;

    int currentTime = 0;
    while (1) {
        int done = 1;
        for (int i = 0; i < n; i++) {
            if (remainingTime[i] > 0) {
                done = 0;
                if (remainingTime[i] > TIME_QUANTUM) {
                    currentTime += TIME_QUANTUM;
                    remainingTime[i] -= TIME_QUANTUM;
                } else {
                    currentTime += remainingTime[i];
                    processes[i].waiting_time = currentTime - processes[i].burst_time;
                    remainingTime[i] = 0;
                    processes[i].completion_time = currentTime;
                }
            }
        }
        if (done == 1)
            break;
    }

    printf("\nPID\tBurst Time\tArrival Time\tPriority\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burst_time, processes[i].arrival_time, processes[i].priority, processes[i].completion_time, processes[i].turnaround_time, processes[i].waiting_time);
    }
}

void nonPreemptivePriority(Process processes[], int n) {
    // Sort processes by priority
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].priority > processes[j + 1].priority) {
                Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    int currentTime = 0;
    for (int i = 0; i < n; i++) {
        processes[i].waiting_time = currentTime - processes[i].arrival_time;
        currentTime += processes[i].burst_time;
        processes[i].completion_time = currentTime;
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
    }

    printf("\nPID\tBurst Time\tArrival Time\tPriority\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burst_time, processes[i].arrival_time, processes[i].priority, processes[i].completion_time, processes[i].turnaround_time, processes[i].waiting_time);
    }
}
