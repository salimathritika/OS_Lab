#include<stdio.h>
#include<stdlib.h>

int safeseq(int p,int r,int max[][r],int alloc[][r],int avail[])
{
    int fin[p],work[r],need[p][r],seq[p];
    int i,j,comp,cp;
    for(i=0;i<p;i++)
        fin[i]=0;
    for(i=0;i<r;i++)
        work[i]=avail[i];
    for(i=0;i<p;i++)
    {
        for(j=0;j<r;j++)
            need[i][j]=max[i][j]-alloc[i][j];
    }
    int count=0;
    while(count<p)
    {
        comp=0;
        for(i=0;i<p;i++)
        {
            if(fin[i]==0)
            {
                cp=1;
                for(j=0;j<r;j++)
                {
                    if(need[i][j]>work[j])
                    {
                        cp=0;
                        break;
                    }
                }
                if(cp)
                {
                    for(j=0;j<r;j++)
                        work[j]+=alloc[i][j];
                    seq[count++]=i;
                    comp=1;
                    fin[i]=1;
                }
            }
        }
        if(!comp)
        {
            printf("\nSafe sequence not found\n");
            return -1;
        }

    }
    printf("Safe sequence is:\n");
    for(i=0;i<p;i++)
        printf("P%d\t",seq[i]+1);
}


void resourcereq(int p,int r,int max[][r],int alloc[][r],int avail[],int pid,int req[])
{
    int i,j,flag=0;
    for(i=0;i<r;i++)
    {
        if(avail[i]<req[i])
           {
               printf("Not enough resources available\n");
               return;
           }
    }
    for(i=0;i<r;i++)
    {
        if((max[pid][i]-alloc[pid][i])<req[i])
        {
            printf("Resources exceed max limit\n");
            return;
        }
    }
    for(i=0;i<r;i++)
    {
        alloc[pid][i]+=req[i];
        avail[i]-=req[i];
    }
    flag=safeseq(p,r,max,alloc,avail);
    if(flag==-1)
    {
         for(i=0;i<r;i++)
           {
             alloc[pid][i]+=req[i];
             avail[i]-=req[i];
           }
    }
}


int main()
{
    int p,r,i,j,pid;
    printf("Enter the total number of processes:");
    scanf("%d",&p);
    printf("Enter the total number of resources:");
    scanf("%d",&r);
    int avail[r],max[p][r],alloc[p][r],req[r];
    printf("Enter the available resources:\n");
    for(i=0;i<r;i++)
        scanf("%d",&avail[i]);
    printf("Enter the maximum number of resources needed by the processes:\n");
    for(i=0;i<p;i++)
    {
        printf("Process %d:\n",(i+1));
        for(j=0;j<r;j++)
            scanf("%d",&max[i][j]);
    }
    printf("Enter the number of resources allocated to the processes:\n");
    for(i=0;i<p;i++)
    {
        printf("Process %d:\n",(i+1));
        for(j=0;j<r;j++)
            scanf("%d",&alloc[i][j]);
    }

    safeseq(p,r,max,alloc,avail);

    printf("Enter the process id making the request:");
    scanf("%d",&pid);
    printf("Enter the resource request:\n");
    for(i=0;i<r;i++)
        scanf("%d",&req[i]);
    resourcereq(p,r,max,alloc,avail,pid,req);
}
